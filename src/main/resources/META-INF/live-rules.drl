package org.jahia.modules.visibility.rules

// list any import classes here.
import org.jahia.services.content.rules.*
import org.jahia.modules.visibility.rules.*
import org.jahia.utils.DateUtils
import org.slf4j.Logger

expander rules.dsl

// declare any global variables here
global User user
global Service service
global Logger logger
global VisibilityRuleService visibilityService

rule "Flush caches for start date visibility condition"
    salience 25
    when
        A property start has been set on a node
             - the node has the type jnt:startEndDateCondition
    then
        Execute the action "startDateVisibilityAction" now on the node
        Execute the action "startDateVisibilityAction" at start on the node
end

rule "Flush caches for end date visibility condition"
    salience 25
    when
        A property end has been set on a node
             - the node has the type jnt:startEndDateCondition
    then
        Execute the action "endDateVisibilityAction" now on the node
        Execute the action "endDateVisibilityAction" at end on the node
end

rule "Cancel start date visibility action"
    salience 25
    when
		A property start has been removed from a node
             - the node has the type jnt:startEndDateCondition
    then
    	Log "Canceling start date visibility action on node " + node.getPath()
        Cancel execution of action "startDateVisibilityAction" on the node
end

rule "Cancel end date visibility action"
    salience 25
    when
		A property end has been removed from a node
             - the node has the type jnt:startEndDateCondition
    then
    	Log "Canceling end date visibility action on node " + node.getPath()
        Cancel execution of action "endDateVisibilityAction" on the node
end

rule "Cancel start and end date visibility actions"
    salience 25
    when
        A node is deleted
             - the node has the type jnt:startEndDateCondition
    then
    	Log "Canceling start and end date visibility actions on node " + node.getPath()
        Cancel execution of action "startDateVisibilityAction" on the node
        Cancel execution of action "endDateVisibilityAction" on the node
end

rule "Flush caches when j:conditionalVisibility is suppressed"
    salience 25
    when
        A node is deleted
             - its name is j:conditionalVisibility
    then
    	Log "Visibility settings were changed (conditions node deleted). Flushing caches on node " + node.getPath()
        Execute the action "flushVisibilityOnDeleteAll" now on the parent
end

rule "Flush caches when a jnt:condition is suppressed"
    salience 25
    when
        A node is deleted
        The node has a parent
            - the parent has the type jnt:conditionalVisibility
    then
    	Log "Visibility settings were changed (condition node deleted). Flushing caches on node " + node.getPath()
        Execute the action "flushVisibilityOnDelete" now on the parent
end

rule "Flush cache for forceMatchAllConditions is changed"
    salience 25
    when
        A property j:forceMatchAllConditions has been set on a node
             - the node has the type jnt:conditionalVisibility
    then
        Execute the action "forceMatchAllConditionsVisibilityAction" now on the node
end

rule "Flush caches for day of the week visibility condition"
    salience 25
    when
        A property dayOfWeek has been set on a node
			- the node has the type jnt:dayOfWeekCondition
    then
    	Log "Scheduling day of week visibility actions on node " + node.getPath() + " for days of the week " + propertyValue
    	Execute the action "startDayOfWeekVisibilityAction" now on the node
    	Schedule the background action "startDayOfWeekVisibilityAction" on the node using cron expression DateUtils.getDayOfWeekStartCron(propertyValue)
    	Schedule the background action "endDayOfWeekVisibilityAction" on the node using cron expression DateUtils.getDayOfWeekEndCron(propertyValue)
end

rule "Cancel day of the week visibility actions"
    salience 25
    when
		A property dayOfWeek has been removed from a node
             - the node has the type jnt:dayOfWeekCondition
    then
    	Log "Canceling day of week visibility actions on node " + node.getPath()
        Cancel execution of action "startDayOfWeekVisibilityAction" on the node
        Cancel execution of action "endDayOfWeekVisibilityAction" on the node
end

rule "Cancel day of the week visibility actions (node deleted)"
    salience 25
    when
        A node is deleted
             - the node has the type jnt:dayOfWeekCondition
    then
    	Log "Canceling day of week visibility actions on node " + node.getPath()
        Cancel execution of action "startDayOfWeekVisibilityAction" on the node
        Cancel execution of action "endDayOfWeekVisibilityAction" on the node
end

rule "Flush caches for time of the day visibility condition (start)"
    salience 25
    when
        A property has been set on a node
			- the node has the type jnt:timeOfDayCondition
			- its name matches "(startHour|startMinute)"
    then
    	Log "Scheduling start time of the day visibility actions on node " + node.getPath() + " at 0 " + node.getProperty("startMinute").getStringValue() + " " + node.getProperty("startHour").getStringValue() + " ? * *"
    	Execute the action "startTimeOfDayVisibilityAction" now on the node
    	Schedule the background action "startTimeOfDayVisibilityAction" on the node using cron expression "0 " + node.getProperty("startMinute").getStringValue() + " " + node.getProperty("startHour").getStringValue() + " ? * *"
end

rule "Flush caches for time of the day visibility condition (end)"
    salience 25
    when
        A property has been set on a node
			- the node has the type jnt:timeOfDayCondition
			- its name matches "(endHour|endMinute)"
    then
    	Log "Scheduling end time of the day visibility actions on node " + node.getPath() + " at 0 " + node.getProperty("endMinute").getStringValue() + " " + node.getProperty("endHour").getStringValue() + " ? * *"
    	Execute the action "endTimeOfDayVisibilityAction" now on the node
    	Schedule the background action "endTimeOfDayVisibilityAction" on the node using cron expression "0 " + node.getProperty("endMinute").getStringValue() + " " + node.getProperty("endHour").getStringValue() + " ? * *"
end

rule "Cancel time of the day visibility actions (node deleted)"
    salience 25
    when
        A node is deleted
             - the node has the type jnt:timeOfDayCondition
    then
    	Log "Canceling time of the day visibility actions on node " + node.getPath()
        Cancel execution of action "startTimeOfDayVisibilityAction" on the node
        Cancel execution of action "endTimeOfDayVisibilityAction" on the node
end
